from time import sleep

import telebot
from telebot import types
from datetime import datetime, timedelta
import schedule
import threading

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∂–∞–Ω–≥–æ
import os, sys
import django

from bot_support_functions import error_text, parse_datetime

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(CURRENT_DIR))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "DNC.settings")
django.setup()

from tgbot.models import Botuser, Zacup, Botsettings

botsettings = Botsettings.objects.get(id=1)

API_TOKEN = botsettings.bot_token
Admin_tgid = botsettings.admin_tgid

bot = telebot.TeleBot(API_TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
   all_users = Botuser.objects.all()
   chat_id = message.chat.id
   its_new_user = True
   for user in all_users:
      if user.tg_id == chat_id:
          if user.access_granted:
              bot.send_message(chat_id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.user_name}.\n–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—á–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫—É–ø–∫–∏.")
              bot.register_next_step_handler(message, check_user)
          else:
              bot.send_message(chat_id,
                               f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.user_name}.\n–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
              bot.register_next_step_handler(message, start)
          its_new_user = False
          break
   if its_new_user:
      bot.send_message(chat_id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
      bot.register_next_step_handler(message, get_surname)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_surname(message):
   chat_id = message.chat.id
   if message.text == '/start':
       bot.send_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ Start –Ω–µ –º–æ–∂–µ—Ç —è–≤–ª—è—Ç—Å—è —Ñ–∞–º–∏–ª–∏–µ–π. –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é.")
       bot.register_next_step_handler(message, get_surname)
   else:
      surname = message.text
      bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
      bot.register_next_step_handler(message, get_name, surname)

def get_name(message, surname):
    chat_id = message.chat.id
    # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    approve_button = types.InlineKeyboardButton("‚úÖ–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='approve')
    unapprove_button = types.InlineKeyboardButton("‚ùå–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='unapprove')
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(approve_button, unapprove_button)
    if message.text == '/start':
        bot.send_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ Start –Ω–µ –º–æ–∂–µ—Ç —è–≤–ª—è—Ç—Å—è –∏–º–µ–Ω–µ–º. –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è.")
        bot.register_next_step_handler(message, get_name, surname)
    else:
       tg_user = Botuser()
       tg_user.user_surname = surname
       tg_user.user_name = message.text
       tg_user.tg_id = message.from_user.id
       tg_user.date_of_registration = datetime.now()
       tg_user.access_granted = False
       if message.from_user.username == None:
           tg_user.tg_nic = "(–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"
       else:
           tg_user.tg_nic = "@" + message.from_user.username

       tg_user.save()
       bot.send_message(chat_id, f"{tg_user.user_name}, –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
       bot.register_next_step_handler(message, start)
       bot.send_message(Admin_tgid,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user.tg_nic} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ {surname} {tg_user.user_name} –∏ –ø–æ–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É | id={tg_user.id}",
                        reply_markup=markup)

# –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def check_user(message):
    chat_id = message.chat.id
    try:
        user = Botuser.objects.get(tg_id=chat_id)
        if user.access_granted:
            check_number(message)
        else:
            bot.send_message(chat_id, "–î–ª—è –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–≥—Ä–∞–Ω–∏–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–∏—Å–∞.")
            bot.clear_step_handler_by_chat_id(chat_id)
            clear_bot_buttons(message.id, chat_id)
            bot.register_next_step_handler(message, start)
    except:
        bot.send_message(chat_id, "–í–∞—à –ø—Ä–æ–≤–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–∏—Å–∞.")
        bot.clear_step_handler_by_chat_id(chat_id)
        clear_bot_buttons(message.id, chat_id)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
def check_number(message):
   chat_id = message.chat.id
   doc_number = message.text
   register_number = Zacup.objects.exclude(status="–°–≤–æ–±–æ–¥–Ω—ã–π")
   number_free = True
   # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
   markup = types.InlineKeyboardMarkup()
   # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
   zabronirovat_button = types.InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data='zabronirovat')
   # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
   markup.add(zabronirovat_button)
   if message.text == '/start':
       bot.send_message(chat_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
       bot.register_next_step_handler(message, check_user)
   else:
       for el in register_number:
           if doc_number.upper().replace(" ", "") == el.doc_number:
               number_free = False
               print(el.bot_user.tg_id)
               print(chat_id)
               if el.bot_user.tg_id == chat_id:
                   usermenu = types.InlineKeyboardMarkup()
                   # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                   rentable_button = types.InlineKeyboardButton("‚úÖ–£–ß–ê–°–¢–í–£–ï–ú", callback_data='rentable')
                   victory_button = types.InlineKeyboardButton("‚≠ê–ü–û–ë–ï–î–ê", callback_data='victory')
                   otcaz_button = types.InlineKeyboardButton("‚ùå–û–¢–ö–ê–ó", callback_data='otcaz')
                   dont_win_button = types.InlineKeyboardButton("‚ùå–ù–ï –í–´–ò–ì–†–ê–õ", callback_data='otcaz')
                   change_time_button = types.InlineKeyboardButton("üîÑÔ∏è–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è", callback_data='change_time')
                   nothing_button = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É", callback_data='nothing')
                   # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                   if el.status == "–£—á–∞—Å—Ç–≤—É–µ–º":
                       usermenu.add(victory_button, change_time_button, dont_win_button, nothing_button)
                       text_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ ‚Ññ{el.doc_number} -->\n–ó–∞–∫—É–ø–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –í–∞–º–∏.\n–°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏: {el.status}.\n–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫: {(el.final_date).strftime("%d.%m.%Y %H:%M")}\n–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫—É–ø–∫—É –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–±–µ–¥–∞' –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—Å—è –æ—Ç –ø—Ä–æ—Å—á–µ—Ç–∞"
                       bot.send_message(chat_id, text_message, reply_markup=usermenu)
                   elif el.status == "–ü–æ–±–µ–¥–∞":
                       text_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ ‚Ññ{el.doc_number} -->\n–ó–∞–∫—É–ø–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –í–∞–º–∏.\n–°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏: {el.status}.\n–≠—Ç–æ –∑–∞–∫—É–ø–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!"
                       bot.send_message(chat_id, text_message)
                   else:
                       usermenu.add(rentable_button, otcaz_button, nothing_button)
                       text_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ ‚Ññ{el.doc_number} -->\n–ó–∞–∫—É–ø–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –í–∞–º–∏.\n–°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏: {el.status}.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫—É–ø–∫—É –≤ —Å—Ç–∞—Ç—É—Å '–£—á–∞—Å—Ç–≤—É–µ–º' –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—Å—è –æ—Ç –ø—Ä–æ—Å—á–µ—Ç–∞"
                       bot.send_message(chat_id, text_message, reply_markup=usermenu)
                   bot.register_next_step_handler(message, check_user)
               else:
                   bot.send_message(chat_id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ ‚Ññ{el.doc_number} -->\n‚ùå –≠—Ç–∞ –∑–∞–∫—É–ø–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.\n–°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏: {el.status}.\n–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(el.booking_date)[0:16]}\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–æ–π –∑–∞–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞.")
                   bot.register_next_step_handler(message, check_user)
               break
       if number_free:
           bot.reply_to(message, "‚úÖ –ó–∞–∫—É–ø–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞ –¥–ª—è –ø—Ä–æ—Å—á–µ—Ç–∞", reply_markup=markup)
           bot.register_next_step_handler(message, check_user)


def set_status_rentable(message, doc_number):
    final_date = parse_datetime(message.text)
    print(final_date)
    if final_date == error_text:
        bot.send_message(message.chat.id, error_text)
        bot.register_next_step_handler(message, set_status_rentable, doc_number)
    else:
        markup = types.InlineKeyboardMarkup()
        ok_time_button = types.InlineKeyboardButton("‚úÖ–í—Ä–µ–º—è –≤–µ—Ä–Ω–æ–µ", callback_data='ok_time')
        change_time_button = types.InlineKeyboardButton("üîÑÔ∏è–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è", callback_data='change_time')
        markup.add(ok_time_button, change_time_button)
        zacup = Zacup.objects.get(doc_number=doc_number)
        zacup.status = "–£—á–∞—Å—Ç–≤—É–µ–º"
        zacup.final_date = datetime.fromisoformat(final_date)
        zacup.save()
        bot.send_message(message.chat.id, f"–î–ª—è –∑–∞–∫—É–ø–∫–∏ ‚Ññ{doc_number} --> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫: {(zacup.final_date).strftime("%d.%m.%Y %H:%M")} –∏ –∑–∞–∫—É–ø–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–£—á–∞—Å—Ç–≤—É–µ–º'.\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è'", reply_markup=markup)
        bot.register_next_step_handler(message, check_user)


# –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
   if call.data == 'rentable':
       # –û—á–∏—â–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
       bot.clear_step_handler_by_chat_id(call.message.chat.id)
       print("--")# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       print(call.message.message_id)
       bot.delete_message(call.message.chat.id, call.message.id)
       doc_number = call.message.text
       print(doc_number)
       doc_number = doc_number[doc_number.find('‚Ññ')+1:doc_number.find('-->')-1]
       print(doc_number)
       bot.send_message(call.message.chat.id, f"–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å '–£—á–∞—Å—Ç–≤—É–µ–º' —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫.")
       bot.register_next_step_handler(call.message, set_status_rentable, doc_number)
       # –§—É–Ω–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
       clear_bot_buttons(call.message.id, call.message.chat.id)
   elif call.data == 'victory':
       print(call)# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       bot.delete_message(call.message.chat.id, call.message.id)
       doc_number = call.message.text
       print(doc_number)
       doc_number = doc_number[doc_number.find('‚Ññ')+1:doc_number.find('-->')-1]
       print(doc_number)
       user = Botuser.objects.get(tg_id=call.message.chat.id)
       # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
       markup = types.InlineKeyboardMarkup()
       victory_yes_button = types.InlineKeyboardButton("‚≠ê–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–±–µ–¥—É", callback_data='victory_yes')
       victory_no_button = types.InlineKeyboardButton("‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data='victory_no')
       markup.add(victory_yes_button, victory_no_button)
       bot.send_message(call.message.chat.id, f"–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫—É–ø–∫–∏ ‚Ññ{doc_number} –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–±–µ–¥–∞'.")
       bot.send_message(Admin_tgid, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_name} {user.user_surname} - {user.tg_nic}.\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫—É–ø–∫—É ‚Ññ{doc_number} --> –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–±–µ–¥–∞'.", reply_markup=markup)
   elif call.data == 'otcaz':
       print(call)# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       bot.delete_message(call.message.chat.id, call.message.id)
       doc_number = call.message.text
       print(doc_number)
       doc_number = doc_number[doc_number.find('‚Ññ')+1:doc_number.find('-->')-1]
       print(doc_number)
       zacup = Zacup.objects.get(doc_number=doc_number)
       zacup.status = "–°–≤–æ–±–æ–¥–Ω—ã–π"
       zacup.save()
       bot.send_message(call.message.chat.id, f"–ó–∞–∫—É–ø–∫–∞ ‚Ññ{doc_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–°–≤–æ–±–æ–¥–Ω—ã–π'")

   elif call.data == 'nothing':
       bot.delete_message(call.message.chat.id, call.message.id)
       clear_bot_buttons(call.message.id, call.message.chat.id)
   elif call.data == 'waiting':
       bot.delete_message(call.message.chat.id, call.message.id)
       doc_number = call.message.text
       doc_number = doc_number[doc_number.find('‚Ññ')+1:doc_number.find('-->')-1]
       zacup = Zacup.objects.get(doc_number=doc_number)
       zacup.final_date = zacup.final_date + timedelta(hours=72)
       zacup.save()
       bot.send_message(zacup.bot_user.tg_id, f"–ü–æ –∑–∞–∫—É–ø–∫–µ ‚Ññ{doc_number} –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞ –Ω–∞ 72 —á–∞—Å–∞.")
   elif call.data == 'victory_yes':
       doc_number = call.message.text
       doc_number = doc_number[doc_number.find('‚Ññ')+1:doc_number.find('-->')-1]
       zacup = Zacup.objects.get(doc_number=doc_number)
       zacup.status = "–ü–æ–±–µ–¥–∞"
       zacup.save()
       congratulations = "–£—Ä–∞! –ü–û–ó–î–†–ê–í–õ–Ø–Æ!!! üéàü•≥üéâüôåüéä!!! –ú—ã –ü–û–ë–ï–î–ò–õ–ò!!! ‚≠ê"
       bot.send_message(zacup.bot_user.tg_id, f"–ó–∞–∫—É–ø–∫–∞ ‚Ññ{zacup.doc_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–±–µ–¥–∞'")
       sleep(1)
       bot.send_message(zacup.bot_user.tg_id, f"{congratulations}")
       bot.send_message(Admin_tgid, f"–ó–∞–∫—É–ø–∫–∞ ‚Ññ{zacup.doc_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–±–µ–¥–∞'\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{congratulations}")
   elif call.data == 'victory_no':
       doc_number = call.message.text
       doc_number = doc_number[doc_number.find('‚Ññ') + 1:doc_number.find('-->') - 1]
       zacup = Zacup.objects.get(doc_number=doc_number)
       bot.send_message(zacup.bot_user.tg_id, f"–î–ª—è –∑–∞–∫—É–ø–∫–∏ ‚Ññ{zacup.doc_number} —Å—Ç–∞—Ç—É—Å '–ü–æ–±–µ–¥–∞' –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–æ–Ω–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
       bot.send_message(Admin_tgid,f"–î–ª—è –∑–∞–∫—É–ø–∫–∏ ‚Ññ{zacup.doc_number} –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–±–µ–¥–∞' –û–¢–ú–ï–ù–ï–ù.")
   elif call.data == 'approve':
       bot.delete_message(call.message.chat.id, call.message.id)
       userid = call.message.text
       userid = int(userid[userid.find('=') + 1:999])
       botuser = Botuser.objects.get(id=userid)
       botuser.access_granted = True
       botuser.save()
       bot.send_message(Admin_tgid, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {botuser.tg_nic} –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É.")
       bot.send_message(botuser.tg_id, f"–í–∞–º –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start")
   elif call.data == 'unapprove':
       bot.delete_message(call.message.chat.id, call.message.id)
       userid = call.message.text
       userid = int(userid[userid.find('=') + 1:999])
       botuser = Botuser.objects.get(id=userid)
       bot.send_message(Admin_tgid, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {botuser.tg_nic} –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ —Å–µ—Ä–≤–∏—Å—É.")
       bot.send_message(botuser.tg_id, f"–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ —Å–µ—Ä–≤–∏—Å—É. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º.")
   elif call.data == 'ok_time':
       bot.delete_message(call.message.chat.id, call.message.id)
       clear_bot_buttons(call.message.id, call.message.chat.id)
   elif call.data == 'change_time':
       bot.delete_message(call.message.chat.id, call.message.id)
       bot.clear_step_handler_by_chat_id(call.message.chat.id)
       doc_number = call.message.text
       doc_number = doc_number[doc_number.find('‚Ññ') + 1:doc_number.find('-->') - 1]
       bot.send_message(call.message.chat.id, f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä 2024-12-25 11:50")
       bot.register_next_step_handler(call.message, set_status_rentable, doc_number)
       clear_bot_buttons(call.message.id, call.message.chat.id)
   elif call.data == 'zabronirovat':
       try:
           doc_number = call.json["message"]['reply_to_message']['text'].upper().replace(" ", "")
           print(doc_number)
           zacup = Zacup.objects.get(doc_number=doc_number)
           zacup.status = "–ù–∞ –ø—Ä–æ—Å—á–µ—Ç–µ"
           zacup.booking_date = datetime.now()
           zacup.bot_user = Botuser.objects.get(tg_id=call.from_user.id)
           zacup.save()
           # bot.send_message(call.message.chat.id, f"–ó–∞–∫—É–ø–∫–∞ ‚Ññ{doc_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–°–≤–æ–±–æ–¥–Ω—ã–π'")
       except:
           print(call.message.text)
           print(call)
           print(call.from_user.username)
           zacup = Zacup()
           zacup.doc_number = call.json["message"]['reply_to_message']['text'].upper().replace(" ", "")
           zacup.booking_date = datetime.now()
           zacup.final_date = None
           zacup.bot_user = Botuser.objects.get(tg_id=call.from_user.id)
           zacup.status = "–ù–∞ –ø—Ä–æ—Å—á–µ—Ç–µ"
           zacup.save()
           # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID —á–∞—Ç–∞
       bot.send_message(call.message.chat.id, f"–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–∫—É–ø–∫—É: {zacup.doc_number}\n–ó–∞–∫—É–ø–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –í–∞–º–∏ –Ω–∞ 48 —á–∞—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å—á–µ—Ç–∞.")
       clear_bot_buttons(call.message.id, call.message.chat.id)
# –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–æ–∫



# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∏—è —á–∞—Ç–∞ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
def clear_bot_buttons(message_id, chat_id):
    for i in range(message_id, message_id - 20, -1):  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–≥ -1, —á—Ç–æ–±—ã –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        try:
            bot.edit_message_reply_markup(chat_id, i, ' ', reply_markup=None)
        except:
            print('–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')

# –ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
def send_daily_message():
   time_off_zacup = Zacup.objects.filter(status="–ù–∞ –ø—Ä–æ—Å—á–µ—Ç–µ")
   time_now = datetime.now()
   for el in time_off_zacup:
       old_time = str(el.booking_date)
       old_time = old_time[0:old_time.find('+')]
       delta_time = time_now - datetime.fromisoformat(old_time)
       if 151200 < delta_time.total_seconds() < 215999: # 42 —á–∞—Å–∞
           print(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ {el.doc_number} - {delta_time.total_seconds()}')
           # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:
           # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
           markup = types.InlineKeyboardMarkup()
           rentable_button = types.InlineKeyboardButton("‚úÖ–£—á–∞—Å—Ç–≤—É–µ–º", callback_data='rentable')
           otcaz_button = types.InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data='otcaz')
           markup.add(rentable_button, otcaz_button)
           bot.send_message(el.bot_user.tg_id,
                            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ ‚Ññ{el.doc_number} -->\n\n‚åõ–û—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Å—á–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 6 —á–∞—Å–æ–≤.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞–∫—É–ø–∫–µ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–∞ –í–∞–º–∏, –∏–Ω–∞—á–µ –∑–∞–∫—É–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥—É—Ä–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.", reply_markup=markup)
       elif delta_time.total_seconds() > 216000:  # 60 —á–∞—Å–æ–≤
           el.status = "–°–≤–æ–±–æ–¥–Ω—ã–π"
           el.save()
           bot.send_message(el.bot_user.tg_id,
                            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ ‚Ññ{el.doc_number} -->\n–ó–∞–∫—É–ø–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–°–≤–æ–±–æ–¥–Ω—ã–π', –ø–æ—Å–∫–æ–ª—å–∫—É –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Å—á–µ—Ç.\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–∫—É –∑–∞ —Å–æ–±–æ–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.")



def check_victory():
    zacups = Zacup.objects.filter(status='–£—á–∞—Å—Ç–≤—É–µ–º')
    time_now = datetime.now()
    for el in zacups:
        old_time = str(el.final_date)
        old_time = old_time[0:old_time.find('+')]
        delta_time = time_now - datetime.fromisoformat(old_time)
        if delta_time.total_seconds() < 259200:
            markup = types.InlineKeyboardMarkup()
            rentable_button = types.InlineKeyboardButton("‚≠ê–î–ê", callback_data='victory')
            otcaz_button = types.InlineKeyboardButton("‚ùå–ù–ï–¢", callback_data='otcaz')
            waiting_button = types.InlineKeyboardButton("‚è≥–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤", callback_data='waiting')
            markup.add(rentable_button, otcaz_button, waiting_button)
            bot.send_message(el.bot_user.tg_id,
                             f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ ‚Ññ{el.doc_number} -->\n\n‚åõ–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 72 —á–∞—Å–æ–≤. –ú—ã –ø–æ–±–µ–¥–∏–ª–∏?",
                             reply_markup=markup)



def schedule_messages():
   time = botsettings.check_time
   schedule.every().day.at(time).do(send_daily_message)
   schedule.every().day.at(time).do(check_victory)
   while True:
       schedule.run_pending()
       sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU


# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
threading.Thread(target=schedule_messages, daemon=True).start()

def reolad_bot():
   all_users = Botuser.objects.all()
   for el in all_users:
       # print(el.tg_id, el.access_granted)
       if el.access_granted:
           bot.register_next_step_handler_by_chat_id(el.tg_id, check_user)
       else:
           bot.register_next_step_handler_by_chat_id(el.tg_id, start)



reolad_bot()


bot.send_message(373322649, "–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")

# –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling, –Ω–æ –±–æ—Ç —Ç–æ–≥–¥–∞ —á–∞—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, —Ç–∫ –∏–º –Ω–µ –ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–æ–ª–≥–æ,
# infinity_polling —Ä–µ—à–∞–µ—Ç —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É
# bot.polling()
bot.infinity_polling(timeout=10, long_polling_timeout = 5)